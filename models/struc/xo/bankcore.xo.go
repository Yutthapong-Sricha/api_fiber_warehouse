package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// BankCore represents a row from 'spc_holding.bank_core'.
type BankCore struct {
	IDBankCore uint           `json:"id_bank_core"` // id_bank_core
	BankCode   sql.NullInt64  `json:"bank_code"`    // bank_code
	BankName   sql.NullString `json:"bank_name"`    // bank_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the BankCore exists in the database.
func (bc *BankCore) Exists() bool {
	return bc._exists
}

// Deleted returns true when the BankCore has been marked for deletion from
// the database.
func (bc *BankCore) Deleted() bool {
	return bc._deleted
}

// Insert inserts the BankCore to the database.
func (bc *BankCore) Insert(ctx context.Context, db DB) error {
	switch {
	case bc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case bc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.bank_core (` +
		`bank_code, bank_name` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, bc.BankCode, bc.BankName)
	res, err := db.ExecContext(ctx, sqlstr, bc.BankCode, bc.BankName)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	bc.IDBankCore = uint(id)
	// set exists
	bc._exists = true
	return nil
}

// Update updates a BankCore in the database.
func (bc *BankCore) Update(ctx context.Context, db DB) error {
	switch {
	case !bc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case bc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.bank_core SET ` +
		`bank_code = ?, bank_name = ? ` +
		`WHERE id_bank_core = ?`
	// run
	logf(sqlstr, bc.BankCode, bc.BankName, bc.IDBankCore)
	if _, err := db.ExecContext(ctx, sqlstr, bc.BankCode, bc.BankName, bc.IDBankCore); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the BankCore to the database.
func (bc *BankCore) Save(ctx context.Context, db DB) error {
	if bc.Exists() {
		return bc.Update(ctx, db)
	}
	return bc.Insert(ctx, db)
}

// Upsert performs an upsert for BankCore.
func (bc *BankCore) Upsert(ctx context.Context, db DB) error {
	switch {
	case bc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.bank_core (` +
		`id_bank_core, bank_code, bank_name` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`bank_code = VALUES(bank_code), bank_name = VALUES(bank_name)`
	// run
	logf(sqlstr, bc.IDBankCore, bc.BankCode, bc.BankName)
	if _, err := db.ExecContext(ctx, sqlstr, bc.IDBankCore, bc.BankCode, bc.BankName); err != nil {
		return logerror(err)
	}
	// set exists
	bc._exists = true
	return nil
}

// Delete deletes the BankCore from the database.
func (bc *BankCore) Delete(ctx context.Context, db DB) error {
	switch {
	case !bc._exists: // doesn't exist
		return nil
	case bc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.bank_core ` +
		`WHERE id_bank_core = ?`
	// run
	logf(sqlstr, bc.IDBankCore)
	if _, err := db.ExecContext(ctx, sqlstr, bc.IDBankCore); err != nil {
		return logerror(err)
	}
	// set deleted
	bc._deleted = true
	return nil
}

// BankCoreByIDBankCore retrieves a row from 'spc_holding.bank_core' as a BankCore.
//
// Generated from index 'bank_core_id_bank_core_pkey'.
func BankCoreByIDBankCore(ctx context.Context, db DB, idBankCore uint) (*BankCore, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_bank_core, bank_code, bank_name ` +
		`FROM spc_holding.bank_core ` +
		`WHERE id_bank_core = ?`
	// run
	logf(sqlstr, idBankCore)
	bc := BankCore{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idBankCore).Scan(&bc.IDBankCore, &bc.BankCode, &bc.BankName); err != nil {
		return nil, logerror(err)
	}
	return &bc, nil
}
