package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Customer represents a row from 'spc_holding.customer'.
type Customer struct {
	IDCustomer         uint           `json:"id_customer" db:"id_customer"`//id_customer
	CustCodeSpc        sql.NullString `json:"cust_code_spc" db:"cust_code_spc"`//cust_code_spc
	CustName           sql.NullString `json:"cust_name" db:"cust_name"`//cust_name
	CustLastname       sql.NullString `json:"cust_lastname" db:"cust_lastname"`//cust_lastname
	CustFullname       sql.NullString `json:"cust_fullname" db:"cust_fullname"`//cust_fullname
	CustNickname       sql.NullString `json:"cust_nickname" db:"cust_nickname"`//cust_nickname
	CustTaxID          sql.NullString `json:"cust_tax_id" db:"cust_tax_id"`//cust_tax_id
	CustMobile         sql.NullString `json:"cust_mobile" db:"cust_mobile"`//cust_mobile
	CustTel            sql.NullString `json:"cust_tel" db:"cust_tel"`//cust_tel
	CustEmail          sql.NullString `json:"cust_email" db:"cust_email"`//cust_email
	CustAddress        sql.NullString `json:"cust_address" db:"cust_address"`//cust_address
	IDAddrTambon       sql.NullInt64  `json:"id_addr_tambon" db:"id_addr_tambon"`//id_addr_tambon
	TmpTambonName      sql.NullString `json:"tmp_tambon_name" db:"tmp_tambon_name"`//tmp_tambon_name
	IDAddrAmphure      sql.NullInt64  `json:"id_addr_amphure" db:"id_addr_amphure"`//id_addr_amphure
	TmpAmphureName     sql.NullString `json:"tmp_amphure_name" db:"tmp_amphure_name"`//tmp_amphure_name
	IDAddrProvince     sql.NullInt64  `json:"id_addr_province" db:"id_addr_province"`//id_addr_province
	TmpProvinceName    sql.NullString `json:"tmp_province_name" db:"tmp_province_name"`//tmp_province_name
	TmpZipCode         sql.NullString `json:"tmp_zip_code" db:"tmp_zip_code"`//tmp_zip_code
	Pers4OrComp8       sql.NullBool   `json:"pers4_or_comp8" db:"pers4_or_comp8"`//pers4_or_comp8
	ContactName        sql.NullString `json:"contact_name" db:"contact_name"`//contact_name
	ContactNote        sql.NullString `json:"contact_note" db:"contact_note"`//contact_note
	IsMember356        sql.NullBool   `json:"is_member_356" db:"is_member_356"`//is_member_356
	LineID             sql.NullString `json:"line_id" db:"line_id"`//line_id
	Cust356Flag        sql.NullBool   `json:"cust_356_flag" db:"cust_356_flag"`//cust_356_flag
	RecordCreateTime   sql.NullInt64  `json:"record_create_time" db:"record_create_time"`//record_create_time
	RecordCreateByID   sql.NullInt64  `json:"record_create_by_id" db:"record_create_by_id"`//record_create_by_id
	RecordCreateByName sql.NullString `json:"record_create_by_name" db:"record_create_by_name"`//record_create_by_name
	RecordUpdateTime   sql.NullInt64  `json:"record_update_time" db:"record_update_time"`//record_update_time
	RecordUpdateByID   sql.NullString `json:"record_update_by_id" db:"record_update_by_id"`//record_update_by_id
	RecordUpdateByName sql.NullString `json:"record_update_by_name" db:"record_update_by_name"`//record_update_by_name
	Note               sql.NullString `json:"note" db:"note"`//note
	// xo fields
	//_exists, _deleted bool
}

// Exists returns true when the Customer exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the Customer has been marked for deletion from
// the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the Customer to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.customer (` +
		`cust_code_spc, cust_name, cust_lastname, cust_fullname, cust_nickname, cust_tax_id, cust_mobile, cust_tel, cust_email, cust_address, id_addr_tambon, tmp_tambon_name, id_addr_amphure, tmp_amphure_name, id_addr_province, tmp_province_name, tmp_zip_code, pers4_or_comp8, contact_name, contact_note, is_member_356, line_id, cust_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note)
	res, err := db.ExecContext(ctx, sqlstr, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.IDCustomer = uint(id)
	// set exists
	c._exists = true
	return nil
}

// Update updates a Customer in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.customer SET ` +
		`cust_code_spc = ?, cust_name = ?, cust_lastname = ?, cust_fullname = ?, cust_nickname = ?, cust_tax_id = ?, cust_mobile = ?, cust_tel = ?, cust_email = ?, cust_address = ?, id_addr_tambon = ?, tmp_tambon_name = ?, id_addr_amphure = ?, tmp_amphure_name = ?, id_addr_province = ?, tmp_province_name = ?, tmp_zip_code = ?, pers4_or_comp8 = ?, contact_name = ?, contact_note = ?, is_member_356 = ?, line_id = ?, cust_356_flag = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ?, note = ? ` +
		`WHERE id_customer = ?`
	// run
	logf(sqlstr, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note, c.IDCustomer)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note, c.IDCustomer); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Customer to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for Customer.
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.customer (` +
		`id_customer, cust_code_spc, cust_name, cust_lastname, cust_fullname, cust_nickname, cust_tax_id, cust_mobile, cust_tel, cust_email, cust_address, id_addr_tambon, tmp_tambon_name, id_addr_amphure, tmp_amphure_name, id_addr_province, tmp_province_name, tmp_zip_code, pers4_or_comp8, contact_name, contact_note, is_member_356, line_id, cust_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`cust_code_spc = VALUES(cust_code_spc), cust_name = VALUES(cust_name), cust_lastname = VALUES(cust_lastname), cust_fullname = VALUES(cust_fullname), cust_nickname = VALUES(cust_nickname), cust_tax_id = VALUES(cust_tax_id), cust_mobile = VALUES(cust_mobile), cust_tel = VALUES(cust_tel), cust_email = VALUES(cust_email), cust_address = VALUES(cust_address), id_addr_tambon = VALUES(id_addr_tambon), tmp_tambon_name = VALUES(tmp_tambon_name), id_addr_amphure = VALUES(id_addr_amphure), tmp_amphure_name = VALUES(tmp_amphure_name), id_addr_province = VALUES(id_addr_province), tmp_province_name = VALUES(tmp_province_name), tmp_zip_code = VALUES(tmp_zip_code), pers4_or_comp8 = VALUES(pers4_or_comp8), contact_name = VALUES(contact_name), contact_note = VALUES(contact_note), is_member_356 = VALUES(is_member_356), line_id = VALUES(line_id), cust_356_flag = VALUES(cust_356_flag), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name), note = VALUES(note)`
	// run
	logf(sqlstr, c.IDCustomer, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note)
	if _, err := db.ExecContext(ctx, sqlstr, c.IDCustomer, c.CustCodeSpc, c.CustName, c.CustLastname, c.CustFullname, c.CustNickname, c.CustTaxID, c.CustMobile, c.CustTel, c.CustEmail, c.CustAddress, c.IDAddrTambon, c.TmpTambonName, c.IDAddrAmphure, c.TmpAmphureName, c.IDAddrProvince, c.TmpProvinceName, c.TmpZipCode, c.Pers4OrComp8, c.ContactName, c.ContactNote, c.IsMember356, c.LineID, c.Cust356Flag, c.RecordCreateTime, c.RecordCreateByID, c.RecordCreateByName, c.RecordUpdateTime, c.RecordUpdateByID, c.RecordUpdateByName, c.Note); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the Customer from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.customer ` +
		`WHERE id_customer = ?`
	// run
	logf(sqlstr, c.IDCustomer)
	if _, err := db.ExecContext(ctx, sqlstr, c.IDCustomer); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByIDCustomer retrieves a row from 'spc_holding.customer' as a Customer.
//
// Generated from index 'customer_id_customer_pkey'.
func CustomerByIDCustomer(ctx context.Context, db DB, idCustomer uint) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_customer, cust_code_spc, cust_name, cust_lastname, cust_fullname, cust_nickname, cust_tax_id, cust_mobile, cust_tel, cust_email, cust_address, id_addr_tambon, tmp_tambon_name, id_addr_amphure, tmp_amphure_name, id_addr_province, tmp_province_name, tmp_zip_code, pers4_or_comp8, contact_name, contact_note, is_member_356, line_id, cust_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note ` +
		`FROM spc_holding.customer ` +
		`WHERE id_customer = ?`
	// run
	logf(sqlstr, idCustomer)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idCustomer).Scan(&c.IDCustomer, &c.CustCodeSpc, &c.CustName, &c.CustLastname, &c.CustFullname, &c.CustNickname, &c.CustTaxID, &c.CustMobile, &c.CustTel, &c.CustEmail, &c.CustAddress, &c.IDAddrTambon, &c.TmpTambonName, &c.IDAddrAmphure, &c.TmpAmphureName, &c.IDAddrProvince, &c.TmpProvinceName, &c.TmpZipCode, &c.Pers4OrComp8, &c.ContactName, &c.ContactNote, &c.IsMember356, &c.LineID, &c.Cust356Flag, &c.RecordCreateTime, &c.RecordCreateByID, &c.RecordCreateByName, &c.RecordUpdateTime, &c.RecordUpdateByID, &c.RecordUpdateByName, &c.Note); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
