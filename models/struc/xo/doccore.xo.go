package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DocCore represents a row from 'spc_holding.doc_core'.
type DocCore struct {
	IDDocCore            uint            `json:"id_doc_core"`             // id_doc_core
	IDDocType            sql.NullInt64   `json:"id_doc_type"`             // id_doc_type
	GroupType1in2out     sql.NullBool    `json:"group_type_1in_2out"`     // group_type_1in_2out
	IDBranch             sql.NullInt64   `json:"id_branch"`               // id_branch
	IDActionName         sql.NullInt64   `json:"id_action_name"`          // id_action_name
	DocNumber            sql.NullString  `json:"doc_number"`              // doc_number
	DocRunning           sql.NullInt64   `json:"doc_running"`             // doc_running
	IDCustomer           sql.NullInt64   `json:"id_customer"`             // id_customer
	TmpCustomerName      sql.NullString  `json:"tmp_customer_name"`       // tmp_customer_name
	TmpCustomerMobile    sql.NullString  `json:"tmp_customer_mobile"`     // tmp_customer_mobile
	IDCustRecomm         sql.NullInt64   `json:"id_cust_recomm"`          // id_cust_recomm
	TmpCustNameRecomm    sql.NullString  `json:"tmp_cust_name_recomm"`    // tmp_cust_name_recomm
	TmpCustMobileRecomm  sql.NullString  `json:"tmp_cust_mobile_recomm"`  // tmp_cust_mobile_recomm
	IDCustParent         sql.NullInt64   `json:"id_cust_parent"`          // id_cust_parent
	TmpCustNameParent    sql.NullString  `json:"tmp_cust_name_parent"`    // tmp_cust_name_parent
	TmpCustMobileParent  sql.NullString  `json:"tmp_cust_mobile_parent"`  // tmp_cust_mobile_parent
	IDCustGrtee          sql.NullInt64   `json:"id_cust_grtee"`           // id_cust_grtee
	TmpCustNameGrtee     sql.NullString  `json:"tmp_cust_name_grtee"`     // tmp_cust_name_grtee
	TmpCustMobileGrtee   sql.NullString  `json:"tmp_cust_mobile_grtee"`   // tmp_cust_mobile_grtee
	IDCustContact        sql.NullInt64   `json:"id_cust_contact"`         // id_cust_contact
	TmpCustNameContact   sql.NullString  `json:"tmp_cust_name_contact"`   // tmp_cust_name_contact
	TmpCustMobileContact sql.NullString  `json:"tmp_cust_mobile_contact"` // tmp_cust_mobile_contact
	IDSupplier           sql.NullInt64   `json:"id_supplier"`             // id_supplier
	TmpSuppName          sql.NullString  `json:"tmp_supp_name"`           // tmp_supp_name
	TmpContact1Mobile    sql.NullString  `json:"tmp_contact1_mobile"`     // tmp_contact1_mobile
	TmpContact1Email     sql.NullString  `json:"tmp_contact1_email"`      // tmp_contact1_email
	TotalQuantity        sql.NullInt64   `json:"total_quantity"`          // total_quantity
	TotalPrice           sql.NullFloat64 `json:"total_price"`             // total_price
	TotalDownPayment     sql.NullFloat64 `json:"total_down_payment"`      // total_down_payment
	TotalAfterPayDown    sql.NullFloat64 `json:"total_after_pay_down"`    // total_after_pay_down
	TotalDiscountManual  sql.NullFloat64 `json:"total_discount_manual"`   // total_discount_manual
	TotalCalVat          sql.NullFloat64 `json:"total_cal_vat"`           // total_cal_vat
	TotalNetPrice        sql.NullFloat64 `json:"total_net_price"`         // total_net_price
	DocCoreDesc          sql.NullString  `json:"doc_core_desc"`           // doc_core_desc
	RecordCreateTime     sql.NullInt64   `json:"record_create_time"`      // record_create_time
	RecordCreateByID     sql.NullInt64   `json:"record_create_by_id"`     // record_create_by_id
	RecordCreateByName   sql.NullString  `json:"record_create_by_name"`   // record_create_by_name
	IDSaleStaff          sql.NullInt64   `json:"id_sale_staff"`           // id_sale_staff
	TmpSaleStaffName     sql.NullInt64   `json:"tmp_sale_staff_name"`     // tmp_sale_staff_name
	MonthMm              sql.NullString  `json:"month_mm"`                // month_mm
	Year20yy             sql.NullString  `json:"year_20yy"`               // year_20yy
	TotalTrans           sql.NullInt64   `json:"total_trans"`             // total_trans
	HasEditTrans356      sql.NullBool    `json:"has_edit_trans_356"`      // has_edit_trans_356
	TotalEditTrans       sql.NullInt64   `json:"total_edit_trans"`        // total_edit_trans
	SplitDownPaymentFlag sql.NullBool    `json:"split_down_payment_flag"` // split_down_payment_flag
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DocCore exists in the database.
func (dc *DocCore) Exists() bool {
	return dc._exists
}

// Deleted returns true when the DocCore has been marked for deletion from
// the database.
func (dc *DocCore) Deleted() bool {
	return dc._deleted
}

// Insert inserts the DocCore to the database.
func (dc *DocCore) Insert(ctx context.Context, db DB) error {
	switch {
	case dc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.doc_core (` +
		`id_doc_type, group_type_1in_2out, id_branch, id_action_name, doc_number, doc_running, id_customer, tmp_customer_name, tmp_customer_mobile, id_cust_recomm, tmp_cust_name_recomm, tmp_cust_mobile_recomm, id_cust_parent, tmp_cust_name_parent, tmp_cust_mobile_parent, id_cust_grtee, tmp_cust_name_grtee, tmp_cust_mobile_grtee, id_cust_contact, tmp_cust_name_contact, tmp_cust_mobile_contact, id_supplier, tmp_supp_name, tmp_contact1_mobile, tmp_contact1_email, total_quantity, total_price, total_down_payment, total_after_pay_down, total_discount_manual, total_cal_vat, total_net_price, doc_core_desc, record_create_time, record_create_by_id, record_create_by_name, id_sale_staff, tmp_sale_staff_name, month_mm, year_20yy, total_trans, has_edit_trans_356, total_edit_trans, split_down_payment_flag` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag)
	res, err := db.ExecContext(ctx, sqlstr, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	dc.IDDocCore = uint(id)
	// set exists
	dc._exists = true
	return nil
}

// Update updates a DocCore in the database.
func (dc *DocCore) Update(ctx context.Context, db DB) error {
	switch {
	case !dc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.doc_core SET ` +
		`id_doc_type = ?, group_type_1in_2out = ?, id_branch = ?, id_action_name = ?, doc_number = ?, doc_running = ?, id_customer = ?, tmp_customer_name = ?, tmp_customer_mobile = ?, id_cust_recomm = ?, tmp_cust_name_recomm = ?, tmp_cust_mobile_recomm = ?, id_cust_parent = ?, tmp_cust_name_parent = ?, tmp_cust_mobile_parent = ?, id_cust_grtee = ?, tmp_cust_name_grtee = ?, tmp_cust_mobile_grtee = ?, id_cust_contact = ?, tmp_cust_name_contact = ?, tmp_cust_mobile_contact = ?, id_supplier = ?, tmp_supp_name = ?, tmp_contact1_mobile = ?, tmp_contact1_email = ?, total_quantity = ?, total_price = ?, total_down_payment = ?, total_after_pay_down = ?, total_discount_manual = ?, total_cal_vat = ?, total_net_price = ?, doc_core_desc = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, id_sale_staff = ?, tmp_sale_staff_name = ?, month_mm = ?, year_20yy = ?, total_trans = ?, has_edit_trans_356 = ?, total_edit_trans = ?, split_down_payment_flag = ? ` +
		`WHERE id_doc_core = ?`
	// run
	logf(sqlstr, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag, dc.IDDocCore)
	if _, err := db.ExecContext(ctx, sqlstr, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag, dc.IDDocCore); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DocCore to the database.
func (dc *DocCore) Save(ctx context.Context, db DB) error {
	if dc.Exists() {
		return dc.Update(ctx, db)
	}
	return dc.Insert(ctx, db)
}

// Upsert performs an upsert for DocCore.
func (dc *DocCore) Upsert(ctx context.Context, db DB) error {
	switch {
	case dc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.doc_core (` +
		`id_doc_core, id_doc_type, group_type_1in_2out, id_branch, id_action_name, doc_number, doc_running, id_customer, tmp_customer_name, tmp_customer_mobile, id_cust_recomm, tmp_cust_name_recomm, tmp_cust_mobile_recomm, id_cust_parent, tmp_cust_name_parent, tmp_cust_mobile_parent, id_cust_grtee, tmp_cust_name_grtee, tmp_cust_mobile_grtee, id_cust_contact, tmp_cust_name_contact, tmp_cust_mobile_contact, id_supplier, tmp_supp_name, tmp_contact1_mobile, tmp_contact1_email, total_quantity, total_price, total_down_payment, total_after_pay_down, total_discount_manual, total_cal_vat, total_net_price, doc_core_desc, record_create_time, record_create_by_id, record_create_by_name, id_sale_staff, tmp_sale_staff_name, month_mm, year_20yy, total_trans, has_edit_trans_356, total_edit_trans, split_down_payment_flag` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id_doc_type = VALUES(id_doc_type), group_type_1in_2out = VALUES(group_type_1in_2out), id_branch = VALUES(id_branch), id_action_name = VALUES(id_action_name), doc_number = VALUES(doc_number), doc_running = VALUES(doc_running), id_customer = VALUES(id_customer), tmp_customer_name = VALUES(tmp_customer_name), tmp_customer_mobile = VALUES(tmp_customer_mobile), id_cust_recomm = VALUES(id_cust_recomm), tmp_cust_name_recomm = VALUES(tmp_cust_name_recomm), tmp_cust_mobile_recomm = VALUES(tmp_cust_mobile_recomm), id_cust_parent = VALUES(id_cust_parent), tmp_cust_name_parent = VALUES(tmp_cust_name_parent), tmp_cust_mobile_parent = VALUES(tmp_cust_mobile_parent), id_cust_grtee = VALUES(id_cust_grtee), tmp_cust_name_grtee = VALUES(tmp_cust_name_grtee), tmp_cust_mobile_grtee = VALUES(tmp_cust_mobile_grtee), id_cust_contact = VALUES(id_cust_contact), tmp_cust_name_contact = VALUES(tmp_cust_name_contact), tmp_cust_mobile_contact = VALUES(tmp_cust_mobile_contact), id_supplier = VALUES(id_supplier), tmp_supp_name = VALUES(tmp_supp_name), tmp_contact1_mobile = VALUES(tmp_contact1_mobile), tmp_contact1_email = VALUES(tmp_contact1_email), total_quantity = VALUES(total_quantity), total_price = VALUES(total_price), total_down_payment = VALUES(total_down_payment), total_after_pay_down = VALUES(total_after_pay_down), total_discount_manual = VALUES(total_discount_manual), total_cal_vat = VALUES(total_cal_vat), total_net_price = VALUES(total_net_price), doc_core_desc = VALUES(doc_core_desc), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), id_sale_staff = VALUES(id_sale_staff), tmp_sale_staff_name = VALUES(tmp_sale_staff_name), month_mm = VALUES(month_mm), year_20yy = VALUES(year_20yy), total_trans = VALUES(total_trans), has_edit_trans_356 = VALUES(has_edit_trans_356), total_edit_trans = VALUES(total_edit_trans), split_down_payment_flag = VALUES(split_down_payment_flag)`
	// run
	logf(sqlstr, dc.IDDocCore, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag)
	if _, err := db.ExecContext(ctx, sqlstr, dc.IDDocCore, dc.IDDocType, dc.GroupType1in2out, dc.IDBranch, dc.IDActionName, dc.DocNumber, dc.DocRunning, dc.IDCustomer, dc.TmpCustomerName, dc.TmpCustomerMobile, dc.IDCustRecomm, dc.TmpCustNameRecomm, dc.TmpCustMobileRecomm, dc.IDCustParent, dc.TmpCustNameParent, dc.TmpCustMobileParent, dc.IDCustGrtee, dc.TmpCustNameGrtee, dc.TmpCustMobileGrtee, dc.IDCustContact, dc.TmpCustNameContact, dc.TmpCustMobileContact, dc.IDSupplier, dc.TmpSuppName, dc.TmpContact1Mobile, dc.TmpContact1Email, dc.TotalQuantity, dc.TotalPrice, dc.TotalDownPayment, dc.TotalAfterPayDown, dc.TotalDiscountManual, dc.TotalCalVat, dc.TotalNetPrice, dc.DocCoreDesc, dc.RecordCreateTime, dc.RecordCreateByID, dc.RecordCreateByName, dc.IDSaleStaff, dc.TmpSaleStaffName, dc.MonthMm, dc.Year20yy, dc.TotalTrans, dc.HasEditTrans356, dc.TotalEditTrans, dc.SplitDownPaymentFlag); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Delete deletes the DocCore from the database.
func (dc *DocCore) Delete(ctx context.Context, db DB) error {
	switch {
	case !dc._exists: // doesn't exist
		return nil
	case dc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.doc_core ` +
		`WHERE id_doc_core = ?`
	// run
	logf(sqlstr, dc.IDDocCore)
	if _, err := db.ExecContext(ctx, sqlstr, dc.IDDocCore); err != nil {
		return logerror(err)
	}
	// set deleted
	dc._deleted = true
	return nil
}

// DocCoreByIDDocCore retrieves a row from 'spc_holding.doc_core' as a DocCore.
//
// Generated from index 'doc_core_id_doc_core_pkey'.
func DocCoreByIDDocCore(ctx context.Context, db DB, idDocCore uint) (*DocCore, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_doc_core, id_doc_type, group_type_1in_2out, id_branch, id_action_name, doc_number, doc_running, id_customer, tmp_customer_name, tmp_customer_mobile, id_cust_recomm, tmp_cust_name_recomm, tmp_cust_mobile_recomm, id_cust_parent, tmp_cust_name_parent, tmp_cust_mobile_parent, id_cust_grtee, tmp_cust_name_grtee, tmp_cust_mobile_grtee, id_cust_contact, tmp_cust_name_contact, tmp_cust_mobile_contact, id_supplier, tmp_supp_name, tmp_contact1_mobile, tmp_contact1_email, total_quantity, total_price, total_down_payment, total_after_pay_down, total_discount_manual, total_cal_vat, total_net_price, doc_core_desc, record_create_time, record_create_by_id, record_create_by_name, id_sale_staff, tmp_sale_staff_name, month_mm, year_20yy, total_trans, has_edit_trans_356, total_edit_trans, split_down_payment_flag ` +
		`FROM spc_holding.doc_core ` +
		`WHERE id_doc_core = ?`
	// run
	logf(sqlstr, idDocCore)
	dc := DocCore{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idDocCore).Scan(&dc.IDDocCore, &dc.IDDocType, &dc.GroupType1in2out, &dc.IDBranch, &dc.IDActionName, &dc.DocNumber, &dc.DocRunning, &dc.IDCustomer, &dc.TmpCustomerName, &dc.TmpCustomerMobile, &dc.IDCustRecomm, &dc.TmpCustNameRecomm, &dc.TmpCustMobileRecomm, &dc.IDCustParent, &dc.TmpCustNameParent, &dc.TmpCustMobileParent, &dc.IDCustGrtee, &dc.TmpCustNameGrtee, &dc.TmpCustMobileGrtee, &dc.IDCustContact, &dc.TmpCustNameContact, &dc.TmpCustMobileContact, &dc.IDSupplier, &dc.TmpSuppName, &dc.TmpContact1Mobile, &dc.TmpContact1Email, &dc.TotalQuantity, &dc.TotalPrice, &dc.TotalDownPayment, &dc.TotalAfterPayDown, &dc.TotalDiscountManual, &dc.TotalCalVat, &dc.TotalNetPrice, &dc.DocCoreDesc, &dc.RecordCreateTime, &dc.RecordCreateByID, &dc.RecordCreateByName, &dc.IDSaleStaff, &dc.TmpSaleStaffName, &dc.MonthMm, &dc.Year20yy, &dc.TotalTrans, &dc.HasEditTrans356, &dc.TotalEditTrans, &dc.SplitDownPaymentFlag); err != nil {
		return nil, logerror(err)
	}
	return &dc, nil
}
