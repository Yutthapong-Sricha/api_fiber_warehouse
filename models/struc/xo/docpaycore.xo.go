package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DocPayCore represents a row from 'spc_holding.doc_pay_core'.
type DocPayCore struct {
	IDDocPayCore       uint            `json:"id_doc_pay_core"`       // id_doc_pay_core
	IDPaymentType      sql.NullInt64   `json:"id_payment_type"`       // id_payment_type
	IDDocCore          sql.NullInt64   `json:"id_doc_core"`           // id_doc_core
	IDBranch           sql.NullInt64   `json:"id_branch"`             // id_branch
	IDSupplier         sql.NullInt64   `json:"id_supplier"`           // id_supplier
	ContractNumber     sql.NullString  `json:"contract_number"`       // contract_number
	PayNickname        sql.NullString  `json:"pay_nickname"`          // pay_nickname
	OrgAmt             sql.NullFloat64 `json:"org_amt"`               // org_amt
	DownPercent        sql.NullFloat64 `json:"down_percent"`          // down_percent
	DownAmtCal         sql.NullFloat64 `json:"down_amt_cal"`          // down_amt_cal
	DownAmtInput       sql.NullFloat64 `json:"down_amt_input"`        // down_amt_input
	AmtSubsidySupp     sql.NullFloat64 `json:"amt_subsidy_supp"`      // amt_subsidy_supp
	AmtDownCust        sql.NullFloat64 `json:"amt_down_cust"`         // amt_down_cust
	AmtSubsidyDealer   sql.NullFloat64 `json:"amt_subsidy_dealer"`    // amt_subsidy_dealer
	AmtSubsidyAll      sql.NullFloat64 `json:"amt_subsidy_all"`       // amt_subsidy_all
	DownAmtFinal       sql.NullFloat64 `json:"down_amt_final"`        // down_amt_final
	InstallmentAmt     sql.NullFloat64 `json:"installment_amt"`       // installment_amt
	InstallmentYear    sql.NullInt64   `json:"installment_year"`      // installment_year
	InstallmentIntRate sql.NullFloat64 `json:"installment_int_rate"`  // installment_int_rate
	PayAllInContact    sql.NullInt64   `json:"pay_all_in_contact"`    // pay_all_in_contact
	PayRoundPerYear    sql.NullFloat64 `json:"pay_round_per_year"`    // pay_round_per_year
	PayFinalPerYear    sql.NullFloat64 `json:"pay_final_per_year"`    // pay_final_per_year
	PayRoundAmt        sql.NullFloat64 `json:"pay_round_amt"`         // pay_round_amt
	PayFinalAmt        sql.NullFloat64 `json:"pay_final_amt"`         // pay_final_amt
	PayYearTotalAmt    sql.NullFloat64 `json:"pay_year_total_amt"`    // pay_year_total_amt
	IsActiveFlag       sql.NullBool    `json:"is_active_flag"`        // is_active_flag
	MonthMm            sql.NullString  `json:"month_mm"`              // month_mm
	Year20yy           sql.NullString  `json:"year_20yy"`             // year_20yy
	RecordCreateTime   sql.NullInt64   `json:"record_create_time"`    // record_create_time
	RecordCreateByID   sql.NullInt64   `json:"record_create_by_id"`   // record_create_by_id
	RecordCreateByName sql.NullString  `json:"record_create_by_name"` // record_create_by_name
	RecordUpdateTime   sql.NullInt64   `json:"record_update_time"`    // record_update_time
	RecordUpdateByID   sql.NullInt64   `json:"record_update_by_id"`   // record_update_by_id
	RecordUpdateByName sql.NullString  `json:"record_update_by_name"` // record_update_by_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DocPayCore exists in the database.
func (dpc *DocPayCore) Exists() bool {
	return dpc._exists
}

// Deleted returns true when the DocPayCore has been marked for deletion from
// the database.
func (dpc *DocPayCore) Deleted() bool {
	return dpc._deleted
}

// Insert inserts the DocPayCore to the database.
func (dpc *DocPayCore) Insert(ctx context.Context, db DB) error {
	switch {
	case dpc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dpc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.doc_pay_core (` +
		`id_payment_type, id_doc_core, id_branch, id_supplier, contract_number, pay_nickname, org_amt, down_percent, down_amt_cal, down_amt_input, amt_subsidy_supp, amt_down_cust, amt_subsidy_dealer, amt_subsidy_all, down_amt_final, installment_amt, installment_year, installment_int_rate, pay_all_in_contact, pay_round_per_year, pay_final_per_year, pay_round_amt, pay_final_amt, pay_year_total_amt, is_active_flag, month_mm, year_20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName)
	res, err := db.ExecContext(ctx, sqlstr, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	dpc.IDDocPayCore = uint(id)
	// set exists
	dpc._exists = true
	return nil
}

// Update updates a DocPayCore in the database.
func (dpc *DocPayCore) Update(ctx context.Context, db DB) error {
	switch {
	case !dpc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dpc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.doc_pay_core SET ` +
		`id_payment_type = ?, id_doc_core = ?, id_branch = ?, id_supplier = ?, contract_number = ?, pay_nickname = ?, org_amt = ?, down_percent = ?, down_amt_cal = ?, down_amt_input = ?, amt_subsidy_supp = ?, amt_down_cust = ?, amt_subsidy_dealer = ?, amt_subsidy_all = ?, down_amt_final = ?, installment_amt = ?, installment_year = ?, installment_int_rate = ?, pay_all_in_contact = ?, pay_round_per_year = ?, pay_final_per_year = ?, pay_round_amt = ?, pay_final_amt = ?, pay_year_total_amt = ?, is_active_flag = ?, month_mm = ?, year_20yy = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ? ` +
		`WHERE id_doc_pay_core = ?`
	// run
	logf(sqlstr, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName, dpc.IDDocPayCore)
	if _, err := db.ExecContext(ctx, sqlstr, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName, dpc.IDDocPayCore); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DocPayCore to the database.
func (dpc *DocPayCore) Save(ctx context.Context, db DB) error {
	if dpc.Exists() {
		return dpc.Update(ctx, db)
	}
	return dpc.Insert(ctx, db)
}

// Upsert performs an upsert for DocPayCore.
func (dpc *DocPayCore) Upsert(ctx context.Context, db DB) error {
	switch {
	case dpc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.doc_pay_core (` +
		`id_doc_pay_core, id_payment_type, id_doc_core, id_branch, id_supplier, contract_number, pay_nickname, org_amt, down_percent, down_amt_cal, down_amt_input, amt_subsidy_supp, amt_down_cust, amt_subsidy_dealer, amt_subsidy_all, down_amt_final, installment_amt, installment_year, installment_int_rate, pay_all_in_contact, pay_round_per_year, pay_final_per_year, pay_round_amt, pay_final_amt, pay_year_total_amt, is_active_flag, month_mm, year_20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id_payment_type = VALUES(id_payment_type), id_doc_core = VALUES(id_doc_core), id_branch = VALUES(id_branch), id_supplier = VALUES(id_supplier), contract_number = VALUES(contract_number), pay_nickname = VALUES(pay_nickname), org_amt = VALUES(org_amt), down_percent = VALUES(down_percent), down_amt_cal = VALUES(down_amt_cal), down_amt_input = VALUES(down_amt_input), amt_subsidy_supp = VALUES(amt_subsidy_supp), amt_down_cust = VALUES(amt_down_cust), amt_subsidy_dealer = VALUES(amt_subsidy_dealer), amt_subsidy_all = VALUES(amt_subsidy_all), down_amt_final = VALUES(down_amt_final), installment_amt = VALUES(installment_amt), installment_year = VALUES(installment_year), installment_int_rate = VALUES(installment_int_rate), pay_all_in_contact = VALUES(pay_all_in_contact), pay_round_per_year = VALUES(pay_round_per_year), pay_final_per_year = VALUES(pay_final_per_year), pay_round_amt = VALUES(pay_round_amt), pay_final_amt = VALUES(pay_final_amt), pay_year_total_amt = VALUES(pay_year_total_amt), is_active_flag = VALUES(is_active_flag), month_mm = VALUES(month_mm), year_20yy = VALUES(year_20yy), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name)`
	// run
	logf(sqlstr, dpc.IDDocPayCore, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName)
	if _, err := db.ExecContext(ctx, sqlstr, dpc.IDDocPayCore, dpc.IDPaymentType, dpc.IDDocCore, dpc.IDBranch, dpc.IDSupplier, dpc.ContractNumber, dpc.PayNickname, dpc.OrgAmt, dpc.DownPercent, dpc.DownAmtCal, dpc.DownAmtInput, dpc.AmtSubsidySupp, dpc.AmtDownCust, dpc.AmtSubsidyDealer, dpc.AmtSubsidyAll, dpc.DownAmtFinal, dpc.InstallmentAmt, dpc.InstallmentYear, dpc.InstallmentIntRate, dpc.PayAllInContact, dpc.PayRoundPerYear, dpc.PayFinalPerYear, dpc.PayRoundAmt, dpc.PayFinalAmt, dpc.PayYearTotalAmt, dpc.IsActiveFlag, dpc.MonthMm, dpc.Year20yy, dpc.RecordCreateTime, dpc.RecordCreateByID, dpc.RecordCreateByName, dpc.RecordUpdateTime, dpc.RecordUpdateByID, dpc.RecordUpdateByName); err != nil {
		return logerror(err)
	}
	// set exists
	dpc._exists = true
	return nil
}

// Delete deletes the DocPayCore from the database.
func (dpc *DocPayCore) Delete(ctx context.Context, db DB) error {
	switch {
	case !dpc._exists: // doesn't exist
		return nil
	case dpc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.doc_pay_core ` +
		`WHERE id_doc_pay_core = ?`
	// run
	logf(sqlstr, dpc.IDDocPayCore)
	if _, err := db.ExecContext(ctx, sqlstr, dpc.IDDocPayCore); err != nil {
		return logerror(err)
	}
	// set deleted
	dpc._deleted = true
	return nil
}

// DocPayCoreByIDDocPayCore retrieves a row from 'spc_holding.doc_pay_core' as a DocPayCore.
//
// Generated from index 'doc_pay_core_id_doc_pay_core_pkey'.
func DocPayCoreByIDDocPayCore(ctx context.Context, db DB, idDocPayCore uint) (*DocPayCore, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_doc_pay_core, id_payment_type, id_doc_core, id_branch, id_supplier, contract_number, pay_nickname, org_amt, down_percent, down_amt_cal, down_amt_input, amt_subsidy_supp, amt_down_cust, amt_subsidy_dealer, amt_subsidy_all, down_amt_final, installment_amt, installment_year, installment_int_rate, pay_all_in_contact, pay_round_per_year, pay_final_per_year, pay_round_amt, pay_final_amt, pay_year_total_amt, is_active_flag, month_mm, year_20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name ` +
		`FROM spc_holding.doc_pay_core ` +
		`WHERE id_doc_pay_core = ?`
	// run
	logf(sqlstr, idDocPayCore)
	dpc := DocPayCore{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idDocPayCore).Scan(&dpc.IDDocPayCore, &dpc.IDPaymentType, &dpc.IDDocCore, &dpc.IDBranch, &dpc.IDSupplier, &dpc.ContractNumber, &dpc.PayNickname, &dpc.OrgAmt, &dpc.DownPercent, &dpc.DownAmtCal, &dpc.DownAmtInput, &dpc.AmtSubsidySupp, &dpc.AmtDownCust, &dpc.AmtSubsidyDealer, &dpc.AmtSubsidyAll, &dpc.DownAmtFinal, &dpc.InstallmentAmt, &dpc.InstallmentYear, &dpc.InstallmentIntRate, &dpc.PayAllInContact, &dpc.PayRoundPerYear, &dpc.PayFinalPerYear, &dpc.PayRoundAmt, &dpc.PayFinalAmt, &dpc.PayYearTotalAmt, &dpc.IsActiveFlag, &dpc.MonthMm, &dpc.Year20yy, &dpc.RecordCreateTime, &dpc.RecordCreateByID, &dpc.RecordCreateByName, &dpc.RecordUpdateTime, &dpc.RecordUpdateByID, &dpc.RecordUpdateByName); err != nil {
		return nil, logerror(err)
	}
	return &dpc, nil
}
