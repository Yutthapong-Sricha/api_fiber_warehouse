package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// PromoDetail represents a row from 'spc_holding.promo_detail'.
type PromoDetail struct {
	IDPromoDetail      uint            `json:"id_promo_detail"`       // id_promo_detail
	PromotionName      sql.NullString  `json:"promotion_name"`        // promotion_name
	IDSupplier         sql.NullInt64   `json:"id_supplier"`           // id_supplier
	IDProduct          sql.NullInt64   `json:"id_product"`            // id_product
	TmpProductName     sql.NullString  `json:"tmp_product_name"`      // tmp_product_name
	PromoStartInt      sql.NullInt64   `json:"promo_start_int"`       // promo_start_int
	PromoStartDdmm20yy sql.NullString  `json:"promo_start_ddmm20yy"`  // promo_start_ddmm20yy
	PromoEndInt        sql.NullInt64   `json:"promo_end_int"`         // promo_end_int
	PromoEndDdmm20yy   sql.NullString  `json:"promo_end_ddmm20yy"`    // promo_end_ddmm20yy
	PromoCost          sql.NullFloat64 `json:"promo_cost"`            // promo_cost
	CostMultiply       sql.NullBool    `json:"cost_multiply"`         // cost_multiply
	ProExpired0356Flag sql.NullBool    `json:"pro_expired_0356_flag"` // pro_expired_0356_flag
	ActorName          sql.NullString  `json:"actor_name"`            // actor_name
	ShowPromo356Flag   sql.NullBool    `json:"show_promo_356_flag"`   // show_promo_356_flag
	RecordCreateTime   sql.NullInt64   `json:"record_create_time"`    // record_create_time
	RecordCreateByID   sql.NullInt64   `json:"record_create_by_id"`   // record_create_by_id
	RecordCreateByName sql.NullString  `json:"record_create_by_name"` // record_create_by_name
	RecordUpdateTime   sql.NullInt64   `json:"record_update_time"`    // record_update_time
	RecordUpdateByID   sql.NullInt64   `json:"record_update_by_id"`   // record_update_by_id
	RecordUpdateByName sql.NullInt64   `json:"record_update_by_name"` // record_update_by_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the PromoDetail exists in the database.
func (pd *PromoDetail) Exists() bool {
	return pd._exists
}

// Deleted returns true when the PromoDetail has been marked for deletion from
// the database.
func (pd *PromoDetail) Deleted() bool {
	return pd._deleted
}

// Insert inserts the PromoDetail to the database.
func (pd *PromoDetail) Insert(ctx context.Context, db DB) error {
	switch {
	case pd._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pd._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.promo_detail (` +
		`promotion_name, id_supplier, id_product, tmp_product_name, promo_start_int, promo_start_ddmm20yy, promo_end_int, promo_end_ddmm20yy, promo_cost, cost_multiply, pro_expired_0356_flag, actor_name, show_promo_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName)
	res, err := db.ExecContext(ctx, sqlstr, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	pd.IDPromoDetail = uint(id)
	// set exists
	pd._exists = true
	return nil
}

// Update updates a PromoDetail in the database.
func (pd *PromoDetail) Update(ctx context.Context, db DB) error {
	switch {
	case !pd._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pd._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.promo_detail SET ` +
		`promotion_name = ?, id_supplier = ?, id_product = ?, tmp_product_name = ?, promo_start_int = ?, promo_start_ddmm20yy = ?, promo_end_int = ?, promo_end_ddmm20yy = ?, promo_cost = ?, cost_multiply = ?, pro_expired_0356_flag = ?, actor_name = ?, show_promo_356_flag = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ? ` +
		`WHERE id_promo_detail = ?`
	// run
	logf(sqlstr, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName, pd.IDPromoDetail)
	if _, err := db.ExecContext(ctx, sqlstr, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName, pd.IDPromoDetail); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the PromoDetail to the database.
func (pd *PromoDetail) Save(ctx context.Context, db DB) error {
	if pd.Exists() {
		return pd.Update(ctx, db)
	}
	return pd.Insert(ctx, db)
}

// Upsert performs an upsert for PromoDetail.
func (pd *PromoDetail) Upsert(ctx context.Context, db DB) error {
	switch {
	case pd._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.promo_detail (` +
		`id_promo_detail, promotion_name, id_supplier, id_product, tmp_product_name, promo_start_int, promo_start_ddmm20yy, promo_end_int, promo_end_ddmm20yy, promo_cost, cost_multiply, pro_expired_0356_flag, actor_name, show_promo_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`promotion_name = VALUES(promotion_name), id_supplier = VALUES(id_supplier), id_product = VALUES(id_product), tmp_product_name = VALUES(tmp_product_name), promo_start_int = VALUES(promo_start_int), promo_start_ddmm20yy = VALUES(promo_start_ddmm20yy), promo_end_int = VALUES(promo_end_int), promo_end_ddmm20yy = VALUES(promo_end_ddmm20yy), promo_cost = VALUES(promo_cost), cost_multiply = VALUES(cost_multiply), pro_expired_0356_flag = VALUES(pro_expired_0356_flag), actor_name = VALUES(actor_name), show_promo_356_flag = VALUES(show_promo_356_flag), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name)`
	// run
	logf(sqlstr, pd.IDPromoDetail, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName)
	if _, err := db.ExecContext(ctx, sqlstr, pd.IDPromoDetail, pd.PromotionName, pd.IDSupplier, pd.IDProduct, pd.TmpProductName, pd.PromoStartInt, pd.PromoStartDdmm20yy, pd.PromoEndInt, pd.PromoEndDdmm20yy, pd.PromoCost, pd.CostMultiply, pd.ProExpired0356Flag, pd.ActorName, pd.ShowPromo356Flag, pd.RecordCreateTime, pd.RecordCreateByID, pd.RecordCreateByName, pd.RecordUpdateTime, pd.RecordUpdateByID, pd.RecordUpdateByName); err != nil {
		return logerror(err)
	}
	// set exists
	pd._exists = true
	return nil
}

// Delete deletes the PromoDetail from the database.
func (pd *PromoDetail) Delete(ctx context.Context, db DB) error {
	switch {
	case !pd._exists: // doesn't exist
		return nil
	case pd._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.promo_detail ` +
		`WHERE id_promo_detail = ?`
	// run
	logf(sqlstr, pd.IDPromoDetail)
	if _, err := db.ExecContext(ctx, sqlstr, pd.IDPromoDetail); err != nil {
		return logerror(err)
	}
	// set deleted
	pd._deleted = true
	return nil
}

// PromoDetailByIDPromoDetail retrieves a row from 'spc_holding.promo_detail' as a PromoDetail.
//
// Generated from index 'promo_detail_id_promo_detail_pkey'.
func PromoDetailByIDPromoDetail(ctx context.Context, db DB, idPromoDetail uint) (*PromoDetail, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_promo_detail, promotion_name, id_supplier, id_product, tmp_product_name, promo_start_int, promo_start_ddmm20yy, promo_end_int, promo_end_ddmm20yy, promo_cost, cost_multiply, pro_expired_0356_flag, actor_name, show_promo_356_flag, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name ` +
		`FROM spc_holding.promo_detail ` +
		`WHERE id_promo_detail = ?`
	// run
	logf(sqlstr, idPromoDetail)
	pd := PromoDetail{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idPromoDetail).Scan(&pd.IDPromoDetail, &pd.PromotionName, &pd.IDSupplier, &pd.IDProduct, &pd.TmpProductName, &pd.PromoStartInt, &pd.PromoStartDdmm20yy, &pd.PromoEndInt, &pd.PromoEndDdmm20yy, &pd.PromoCost, &pd.CostMultiply, &pd.ProExpired0356Flag, &pd.ActorName, &pd.ShowPromo356Flag, &pd.RecordCreateTime, &pd.RecordCreateByID, &pd.RecordCreateByName, &pd.RecordUpdateTime, &pd.RecordUpdateByID, &pd.RecordUpdateByName); err != nil {
		return nil, logerror(err)
	}
	return &pd, nil
}
