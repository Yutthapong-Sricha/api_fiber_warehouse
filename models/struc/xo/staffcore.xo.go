package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// StaffCore represents a row from 'spc_holding.staff_core'.
type StaffCore struct {
	IDStaffCore        uint           `json:"id_staff_core"`         // id_staff_core
	IDBranch           sql.NullInt64  `json:"id_branch"`             // id_branch
	TmpBranchName      sql.NullString `json:"tmp_branch_name"`       // tmp_branch_name
	StaffName          sql.NullString `json:"staff_name"`            // staff_name
	StaffLastname      sql.NullString `json:"staff_lastname"`        // staff_lastname
	StaffFullname      sql.NullString `json:"staff_fullname"`        // staff_fullname
	StaffNickname      sql.NullString `json:"staff_nickname"`        // staff_nickname
	StaffTaxID         sql.NullInt64  `json:"staff_tax_id"`          // staff_tax_id
	StaffAddress       sql.NullString `json:"staff_address"`         // staff_address
	IDAddrTambon       sql.NullInt64  `json:"id_addr_tambon"`        // id_addr_tambon
	IDAddrAmphure      sql.NullInt64  `json:"id_addr_amphure"`       // id_addr_amphure
	IDAddrProvince     sql.NullInt64  `json:"id_addr_province"`      // id_addr_province
	StaffMobile1       sql.NullString `json:"staff_mobile1"`         // staff_mobile1
	StaffMobile2       sql.NullString `json:"staff_mobile2"`         // staff_mobile2
	StaffTel           sql.NullString `json:"staff_tel"`             // staff_tel
	StaffEmail         sql.NullString `json:"staff_email"`           // staff_email
	PwdVerification    sql.NullString `json:"pwd_verification"`      // pwd_verification
	IsActiveFlag       sql.NullBool   `json:"is_active_flag"`        // is_active_flag
	StaffLineID        sql.NullString `json:"staff_line_id"`         // staff_line_id
	IDStaffPosition    sql.NullInt64  `json:"id_staff_position"`     // id_staff_position
	TmpPositionName    sql.NullString `json:"tmp_position_name"`     // tmp_position_name
	BirthDayDdmm20yy   sql.NullString `json:"birth_day_ddmm20yy"`    // birth_day_ddmm20yy
	RecordCreateTime   sql.NullInt64  `json:"record_create_time"`    // record_create_time
	RecordCreateByID   sql.NullInt64  `json:"record_create_by_id"`   // record_create_by_id
	RecordCreateByName sql.NullString `json:"record_create_by_name"` // record_create_by_name
	RecordUpdateTime   sql.NullInt64  `json:"record_update_time"`    // record_update_time
	RecordUpdateByID   sql.NullInt64  `json:"record_update_by_id"`   // record_update_by_id
	RecordUpdateByName sql.NullString `json:"record_update_by_name"` // record_update_by_name
	Note               sql.NullString `json:"note"`                  // note
	EmployeeID         sql.NullInt64  `json:"EmployeeId"`            // EmployeeId
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the StaffCore exists in the database.
func (sc *StaffCore) Exists() bool {
	return sc._exists
}

// Deleted returns true when the StaffCore has been marked for deletion from
// the database.
func (sc *StaffCore) Deleted() bool {
	return sc._deleted
}

// Insert inserts the StaffCore to the database.
func (sc *StaffCore) Insert(ctx context.Context, db DB) error {
	switch {
	case sc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.staff_core (` +
		`id_branch, tmp_branch_name, staff_name, staff_lastname, staff_fullname, staff_nickname, staff_tax_id, staff_address, id_addr_tambon, id_addr_amphure, id_addr_province, staff_mobile1, staff_mobile2, staff_tel, staff_email, pwd_verification, is_active_flag, staff_line_id, id_staff_position, tmp_position_name, birth_day_ddmm20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note, EmployeeId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID)
	res, err := db.ExecContext(ctx, sqlstr, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	sc.IDStaffCore = uint(id)
	// set exists
	sc._exists = true
	return nil
}

// Update updates a StaffCore in the database.
func (sc *StaffCore) Update(ctx context.Context, db DB) error {
	switch {
	case !sc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.staff_core SET ` +
		`id_branch = ?, tmp_branch_name = ?, staff_name = ?, staff_lastname = ?, staff_fullname = ?, staff_nickname = ?, staff_tax_id = ?, staff_address = ?, id_addr_tambon = ?, id_addr_amphure = ?, id_addr_province = ?, staff_mobile1 = ?, staff_mobile2 = ?, staff_tel = ?, staff_email = ?, pwd_verification = ?, is_active_flag = ?, staff_line_id = ?, id_staff_position = ?, tmp_position_name = ?, birth_day_ddmm20yy = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ?, note = ?, EmployeeId = ? ` +
		`WHERE id_staff_core = ?`
	// run
	logf(sqlstr, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID, sc.IDStaffCore)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID, sc.IDStaffCore); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the StaffCore to the database.
func (sc *StaffCore) Save(ctx context.Context, db DB) error {
	if sc.Exists() {
		return sc.Update(ctx, db)
	}
	return sc.Insert(ctx, db)
}

// Upsert performs an upsert for StaffCore.
func (sc *StaffCore) Upsert(ctx context.Context, db DB) error {
	switch {
	case sc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.staff_core (` +
		`id_staff_core, id_branch, tmp_branch_name, staff_name, staff_lastname, staff_fullname, staff_nickname, staff_tax_id, staff_address, id_addr_tambon, id_addr_amphure, id_addr_province, staff_mobile1, staff_mobile2, staff_tel, staff_email, pwd_verification, is_active_flag, staff_line_id, id_staff_position, tmp_position_name, birth_day_ddmm20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note, EmployeeId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id_branch = VALUES(id_branch), tmp_branch_name = VALUES(tmp_branch_name), staff_name = VALUES(staff_name), staff_lastname = VALUES(staff_lastname), staff_fullname = VALUES(staff_fullname), staff_nickname = VALUES(staff_nickname), staff_tax_id = VALUES(staff_tax_id), staff_address = VALUES(staff_address), id_addr_tambon = VALUES(id_addr_tambon), id_addr_amphure = VALUES(id_addr_amphure), id_addr_province = VALUES(id_addr_province), staff_mobile1 = VALUES(staff_mobile1), staff_mobile2 = VALUES(staff_mobile2), staff_tel = VALUES(staff_tel), staff_email = VALUES(staff_email), pwd_verification = VALUES(pwd_verification), is_active_flag = VALUES(is_active_flag), staff_line_id = VALUES(staff_line_id), id_staff_position = VALUES(id_staff_position), tmp_position_name = VALUES(tmp_position_name), birth_day_ddmm20yy = VALUES(birth_day_ddmm20yy), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name), note = VALUES(note), EmployeeId = VALUES(EmployeeId)`
	// run
	logf(sqlstr, sc.IDStaffCore, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDStaffCore, sc.IDBranch, sc.TmpBranchName, sc.StaffName, sc.StaffLastname, sc.StaffFullname, sc.StaffNickname, sc.StaffTaxID, sc.StaffAddress, sc.IDAddrTambon, sc.IDAddrAmphure, sc.IDAddrProvince, sc.StaffMobile1, sc.StaffMobile2, sc.StaffTel, sc.StaffEmail, sc.PwdVerification, sc.IsActiveFlag, sc.StaffLineID, sc.IDStaffPosition, sc.TmpPositionName, sc.BirthDayDdmm20yy, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.Note, sc.EmployeeID); err != nil {
		return logerror(err)
	}
	// set exists
	sc._exists = true
	return nil
}

// Delete deletes the StaffCore from the database.
func (sc *StaffCore) Delete(ctx context.Context, db DB) error {
	switch {
	case !sc._exists: // doesn't exist
		return nil
	case sc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.staff_core ` +
		`WHERE id_staff_core = ?`
	// run
	logf(sqlstr, sc.IDStaffCore)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDStaffCore); err != nil {
		return logerror(err)
	}
	// set deleted
	sc._deleted = true
	return nil
}

// StaffCoreByIDStaffCore retrieves a row from 'spc_holding.staff_core' as a StaffCore.
//
// Generated from index 'staff_core_id_staff_core_pkey'.
func StaffCoreByIDStaffCore(ctx context.Context, db DB, idstaffCore uint) (*StaffCore, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_staff_core, id_branch, tmp_branch_name, staff_name, staff_lastname, staff_fullname, staff_nickname, staff_tax_id, staff_address, id_addr_tambon, id_addr_amphure, id_addr_province, staff_mobile1, staff_mobile2, staff_tel, staff_email, pwd_verification, is_active_flag, staff_line_id, id_staff_position, tmp_position_name, birth_day_ddmm20yy, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, note, EmployeeId ` +
		`FROM spc_holding.staff_core ` +
		`WHERE id_staff_core = ?`
	// run
	logf(sqlstr, idstaffCore)
	sc := StaffCore{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idstaffCore).Scan(&sc.IDStaffCore, &sc.IDBranch, &sc.TmpBranchName, &sc.StaffName, &sc.StaffLastname, &sc.StaffFullname, &sc.StaffNickname, &sc.StaffTaxID, &sc.StaffAddress, &sc.IDAddrTambon, &sc.IDAddrAmphure, &sc.IDAddrProvince, &sc.StaffMobile1, &sc.StaffMobile2, &sc.StaffTel, &sc.StaffEmail, &sc.PwdVerification, &sc.IsActiveFlag, &sc.StaffLineID, &sc.IDStaffPosition, &sc.TmpPositionName, &sc.BirthDayDdmm20yy, &sc.RecordCreateTime, &sc.RecordCreateByID, &sc.RecordCreateByName, &sc.RecordUpdateTime, &sc.RecordUpdateByID, &sc.RecordUpdateByName, &sc.Note, &sc.EmployeeID); err != nil {
		return nil, logerror(err)
	}
	return &sc, nil
}
