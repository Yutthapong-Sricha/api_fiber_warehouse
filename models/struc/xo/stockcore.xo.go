package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// StockCore represents a row from 'spc_holding.stock_core'.
type StockCore struct {
	IDStockCore         uint            `json:"id_stock_core"`          // id_stock_core
	IDBranch            sql.NullInt64   `json:"id_branch"`              // id_branch
	IDProduct           sql.NullInt64   `json:"id_product"`             // id_product
	IDSupplier          sql.NullInt64   `json:"id_supplier"`            // id_supplier
	IDProdCategory      sql.NullInt64   `json:"id_prod_category"`       // id_prod_category
	ProductName         sql.NullString  `json:"product_name"`           // product_name
	ProductBrand        sql.NullString  `json:"product_brand"`          // product_brand
	ProductDetail       sql.NullString  `json:"product_detail"`         // product_detail
	ProductModel        sql.NullString  `json:"product_model"`          // product_model
	PartSerialNo        sql.NullString  `json:"part_serial_no"`         // part_serial_no
	PartEngineNo        sql.NullString  `json:"part_engine_no"`         // part_engine_no
	IsVolumeFlag        sql.NullBool    `json:"is_volume_flag"`         // is_volume_flag
	LastCostPrice       sql.NullFloat64 `json:"last_cost_price"`        // last_cost_price
	TotalQtyCost        sql.NullInt64   `json:"total_qty_cost"`         // total_qty_cost
	TotalQtyFree        sql.NullInt64   `json:"total_qty_free"`         // total_qty_free
	QtyOutCost          sql.NullInt64   `json:"qty_out_cost"`           // qty_out_cost
	QtyOutFree          sql.NullInt64   `json:"qty_out_free"`           // qty_out_free
	TotalQtyBalance     sql.NullInt64   `json:"total_qty_balance"`      // total_qty_balance
	PricePerUnit        sql.NullFloat64 `json:"price_per_unit"`         // price_per_unit
	PricePerPack        sql.NullFloat64 `json:"price_per_pack"`         // price_per_pack
	Barcode             sql.NullString  `json:"barcode"`                // barcode
	IntInExcel          sql.NullString  `json:"int_in_excel"`           // int_in_excel
	KeySearch           sql.NullString  `json:"key_search"`             // key_search
	RecordCreateTime    sql.NullInt64   `json:"record_create_time"`     // record_create_time
	RecordCreateByID    sql.NullInt64   `json:"record_create_by_id"`    // record_create_by_id
	RecordCreateByName  sql.NullString  `json:"record_create_by_name"`  // record_create_by_name
	RecordUpdateTime    sql.NullInt64   `json:"record_update_time"`     // record_update_time
	RecordUpdateByID    sql.NullInt64   `json:"record_update_by_id"`    // record_update_by_id
	RecordUpdateByName  sql.NullString  `json:"record_update_by_name"`  // record_update_by_name
	IDLocaStore         sql.NullInt64   `json:"id_loca_store"`          // id_loca_store
	TmpLocaStoreName    sql.NullString  `json:"tmp_loca_store_name"`    // tmp_loca_store_name
	HasPromotion356Flag sql.NullBool    `json:"has_promotion_356_flag"` // has_promotion_356_flag
	IDPromotion         sql.NullInt64   `json:"id_promotion"`           // id_promotion
	ProductCode         sql.NullString  `json:"ProductCode"`            // ProductCode
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the StockCore exists in the database.
func (sc *StockCore) Exists() bool {
	return sc._exists
}

// Deleted returns true when the StockCore has been marked for deletion from
// the database.
func (sc *StockCore) Deleted() bool {
	return sc._deleted
}

// Insert inserts the StockCore to the database.
func (sc *StockCore) Insert(ctx context.Context, db DB) error {
	switch {
	case sc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.stock_core (` +
		`id_branch, id_product, id_supplier, id_prod_category, product_name, product_brand, product_detail, product_model, part_serial_no, part_engine_no, is_volume_flag, last_cost_price, total_qty_cost, total_qty_free, qty_out_cost, qty_out_free, total_qty_balance, price_per_unit, price_per_pack, barcode, int_in_excel, key_search, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, id_loca_store, tmp_loca_store_name, has_promotion_356_flag, id_promotion, ProductCode` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode)
	res, err := db.ExecContext(ctx, sqlstr, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	sc.IDStockCore = uint(id)
	// set exists
	sc._exists = true
	return nil
}

// Update updates a StockCore in the database.
func (sc *StockCore) Update(ctx context.Context, db DB) error {
	switch {
	case !sc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.stock_core SET ` +
		`id_branch = ?, id_product = ?, id_supplier = ?, id_prod_category = ?, product_name = ?, product_brand = ?, product_detail = ?, product_model = ?, part_serial_no = ?, part_engine_no = ?, is_volume_flag = ?, last_cost_price = ?, total_qty_cost = ?, total_qty_free = ?, qty_out_cost = ?, qty_out_free = ?, total_qty_balance = ?, price_per_unit = ?, price_per_pack = ?, barcode = ?, int_in_excel = ?, key_search = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ?, id_loca_store = ?, tmp_loca_store_name = ?, has_promotion_356_flag = ?, id_promotion = ?, ProductCode = ? ` +
		`WHERE id_stock_core = ?`
	// run
	logf(sqlstr, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode, sc.IDStockCore)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode, sc.IDStockCore); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the StockCore to the database.
func (sc *StockCore) Save(ctx context.Context, db DB) error {
	if sc.Exists() {
		return sc.Update(ctx, db)
	}
	return sc.Insert(ctx, db)
}

// Upsert performs an upsert for StockCore.
func (sc *StockCore) Upsert(ctx context.Context, db DB) error {
	switch {
	case sc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.stock_core (` +
		`id_stock_core, id_branch, id_product, id_supplier, id_prod_category, product_name, product_brand, product_detail, product_model, part_serial_no, part_engine_no, is_volume_flag, last_cost_price, total_qty_cost, total_qty_free, qty_out_cost, qty_out_free, total_qty_balance, price_per_unit, price_per_pack, barcode, int_in_excel, key_search, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, id_loca_store, tmp_loca_store_name, has_promotion_356_flag, id_promotion, ProductCode` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id_branch = VALUES(id_branch), id_product = VALUES(id_product), id_supplier = VALUES(id_supplier), id_prod_category = VALUES(id_prod_category), product_name = VALUES(product_name), product_brand = VALUES(product_brand), product_detail = VALUES(product_detail), product_model = VALUES(product_model), part_serial_no = VALUES(part_serial_no), part_engine_no = VALUES(part_engine_no), is_volume_flag = VALUES(is_volume_flag), last_cost_price = VALUES(last_cost_price), total_qty_cost = VALUES(total_qty_cost), total_qty_free = VALUES(total_qty_free), qty_out_cost = VALUES(qty_out_cost), qty_out_free = VALUES(qty_out_free), total_qty_balance = VALUES(total_qty_balance), price_per_unit = VALUES(price_per_unit), price_per_pack = VALUES(price_per_pack), barcode = VALUES(barcode), int_in_excel = VALUES(int_in_excel), key_search = VALUES(key_search), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name), id_loca_store = VALUES(id_loca_store), tmp_loca_store_name = VALUES(tmp_loca_store_name), has_promotion_356_flag = VALUES(has_promotion_356_flag), id_promotion = VALUES(id_promotion), ProductCode = VALUES(ProductCode)`
	// run
	logf(sqlstr, sc.IDStockCore, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDStockCore, sc.IDBranch, sc.IDProduct, sc.IDSupplier, sc.IDProdCategory, sc.ProductName, sc.ProductBrand, sc.ProductDetail, sc.ProductModel, sc.PartSerialNo, sc.PartEngineNo, sc.IsVolumeFlag, sc.LastCostPrice, sc.TotalQtyCost, sc.TotalQtyFree, sc.QtyOutCost, sc.QtyOutFree, sc.TotalQtyBalance, sc.PricePerUnit, sc.PricePerPack, sc.Barcode, sc.IntInExcel, sc.KeySearch, sc.RecordCreateTime, sc.RecordCreateByID, sc.RecordCreateByName, sc.RecordUpdateTime, sc.RecordUpdateByID, sc.RecordUpdateByName, sc.IDLocaStore, sc.TmpLocaStoreName, sc.HasPromotion356Flag, sc.IDPromotion, sc.ProductCode); err != nil {
		return logerror(err)
	}
	// set exists
	sc._exists = true
	return nil
}

// Delete deletes the StockCore from the database.
func (sc *StockCore) Delete(ctx context.Context, db DB) error {
	switch {
	case !sc._exists: // doesn't exist
		return nil
	case sc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.stock_core ` +
		`WHERE id_stock_core = ?`
	// run
	logf(sqlstr, sc.IDStockCore)
	if _, err := db.ExecContext(ctx, sqlstr, sc.IDStockCore); err != nil {
		return logerror(err)
	}
	// set deleted
	sc._deleted = true
	return nil
}

// StockCoreByIDStockCore retrieves a row from 'spc_holding.stock_core' as a StockCore.
//
// Generated from index 'stock_core_id_stock_core_pkey'.
func StockCoreByIDStockCore(ctx context.Context, db DB, idstockCore uint) (*StockCore, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_stock_core, id_branch, id_product, id_supplier, id_prod_category, product_name, product_brand, product_detail, product_model, part_serial_no, part_engine_no, is_volume_flag, last_cost_price, total_qty_cost, total_qty_free, qty_out_cost, qty_out_free, total_qty_balance, price_per_unit, price_per_pack, barcode, int_in_excel, key_search, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, id_loca_store, tmp_loca_store_name, has_promotion_356_flag, id_promotion, ProductCode ` +
		`FROM spc_holding.stock_core ` +
		`WHERE id_stock_core = ?`
	// run
	logf(sqlstr, idstockCore)
	sc := StockCore{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idstockCore).Scan(&sc.IDStockCore, &sc.IDBranch, &sc.IDProduct, &sc.IDSupplier, &sc.IDProdCategory, &sc.ProductName, &sc.ProductBrand, &sc.ProductDetail, &sc.ProductModel, &sc.PartSerialNo, &sc.PartEngineNo, &sc.IsVolumeFlag, &sc.LastCostPrice, &sc.TotalQtyCost, &sc.TotalQtyFree, &sc.QtyOutCost, &sc.QtyOutFree, &sc.TotalQtyBalance, &sc.PricePerUnit, &sc.PricePerPack, &sc.Barcode, &sc.IntInExcel, &sc.KeySearch, &sc.RecordCreateTime, &sc.RecordCreateByID, &sc.RecordCreateByName, &sc.RecordUpdateTime, &sc.RecordUpdateByID, &sc.RecordUpdateByName, &sc.IDLocaStore, &sc.TmpLocaStoreName, &sc.HasPromotion356Flag, &sc.IDPromotion, &sc.ProductCode); err != nil {
		return nil, logerror(err)
	}
	return &sc, nil
}
