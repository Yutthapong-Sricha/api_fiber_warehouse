package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// TmpDocTran represents a row from 'spc_holding.tmp_doc_trans'.
type TmpDocTran struct {
	IDTmpDocTrans      uint            `json:"id_tmp_doc_trans"`      // id_tmp_doc_trans
	IDDocCore          sql.NullInt64   `json:"id_doc_core"`           // id_doc_core
	IDDocSale          sql.NullInt64   `json:"id_doc_sale"`           // id_doc_sale
	IDDocStockOut      sql.NullInt64   `json:"id_doc_stock_out"`      // id_doc_stock_out
	IDDocService       sql.NullInt64   `json:"id_doc_service"`        // id_doc_service
	IDDocPurch         sql.NullInt64   `json:"id_doc_purch"`          // id_doc_purch
	IDDocStockIn       sql.NullInt64   `json:"id_doc_stock_in"`       // id_doc_stock_in
	IDBranch           sql.NullInt64   `json:"id_branch"`             // id_branch
	IDPromoDetail      sql.NullInt64   `json:"id_promo_detail"`       // id_promo_detail
	IDStockCore        sql.NullInt64   `json:"id_stock_core"`         // id_stock_core
	IDProduct          sql.NullInt64   `json:"id_product"`            // id_product
	IDSupplier         sql.NullInt64   `json:"id_supplier"`           // id_supplier
	TmpProductName     sql.NullInt64   `json:"tmp_product_name"`      // tmp_product_name
	PartEngineNo       sql.NullString  `json:"part_engine_no"`        // part_engine_no
	PartSerialNo       sql.NullString  `json:"part_serial_no"`        // part_serial_no
	IsVolumeFlag       sql.NullBool    `json:"is_volume_flag"`        // is_volume_flag
	ZeroCostFlag       sql.NullBool    `json:"zero_cost_flag"`        // zero_cost_flag
	QtyInCost          sql.NullInt64   `json:"qty_in_cost"`           // qty_in_cost
	QtyInFree          sql.NullInt64   `json:"qty_in_free"`           // qty_in_free
	QtyOutCost         sql.NullInt64   `json:"qty_out_cost"`          // qty_out_cost
	QtyOutFree         sql.NullInt64   `json:"qty_out_free"`          // qty_out_free
	PricePerUnit       sql.NullFloat64 `json:"price_per_unit"`        // price_per_unit
	TotalPrice         sql.NullFloat64 `json:"total_price"`           // total_price
	DiscountManual     sql.NullFloat64 `json:"discount_manual"`       // discount_manual
	TmpVat             sql.NullInt64   `json:"tmp_vat"`               // tmp_vat
	CalVat             sql.NullFloat64 `json:"cal_vat"`               // cal_vat
	NetPrice           sql.NullFloat64 `json:"net_price"`             // net_price
	RecordCreateTime   sql.NullInt64   `json:"record_create_time"`    // record_create_time
	RecordCreateByID   sql.NullInt64   `json:"record_create_by_id"`   // record_create_by_id
	RecordCreateByName sql.NullString  `json:"record_create_by_name"` // record_create_by_name
	RecordUpdateTime   sql.NullInt64   `json:"record_update_time"`    // record_update_time
	RecordUpdateByID   sql.NullInt64   `json:"record_update_by_id"`   // record_update_by_id
	RecordUpdateByName sql.NullString  `json:"record_update_by_name"` // record_update_by_name
	MonthMm            sql.NullString  `json:"month_mm"`              // month_mm
	Year20yy           sql.NullString  `json:"year_20yy"`             // year_20yy
	ShowQuoteFlag      sql.NullBool    `json:"show_quote_flag"`       // show_quote_flag
	ShowSaleFlag       sql.NullBool    `json:"show_sale_flag"`        // show_sale_flag
	ShowStockOutFlag   sql.NullBool    `json:"show_stock_out_flag"`   // show_stock_out_flag
	ShowServiceFlag    sql.NullBool    `json:"show_service_flag"`     // show_service_flag
	ShowPurchaseFlag   sql.NullBool    `json:"show_purchase_flag"`    // show_purchase_flag
	ShowStockInFlag    sql.NullBool    `json:"show_stock_in_flag"`    // show_stock_in_flag
	ShowReportFlag     sql.NullBool    `json:"show_report_flag"`      // show_report_flag
	CalDownPaymentFlag sql.NullBool    `json:"cal_down_payment_flag"` // cal_down_payment_flag
	HasEditTransFlag   sql.NullBool    `json:"has_edit_trans_flag"`   // has_edit_trans_flag
	IsActiveFlag       sql.NullBool    `json:"is_active_flag"`        // is_active_flag
	TransDesc          sql.NullString  `json:"trans_desc"`            // trans_desc
	BillSplit123       sql.NullBool    `json:"bill_split_123"`        // bill_split_123
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the TmpDocTran exists in the database.
func (tdt *TmpDocTran) Exists() bool {
	return tdt._exists
}

// Deleted returns true when the TmpDocTran has been marked for deletion from
// the database.
func (tdt *TmpDocTran) Deleted() bool {
	return tdt._deleted
}

// Insert inserts the TmpDocTran to the database.
func (tdt *TmpDocTran) Insert(ctx context.Context, db DB) error {
	switch {
	case tdt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tdt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO spc_holding.tmp_doc_trans (` +
		`id_doc_core, id_doc_sale, id_doc_stock_out, id_doc_service, id_doc_purch, id_doc_stock_in, id_branch, id_promo_detail, id_stock_core, id_product, id_supplier, tmp_product_name, part_engine_no, part_serial_no, is_volume_flag, zero_cost_flag, qty_in_cost, qty_in_free, qty_out_cost, qty_out_free, price_per_unit, total_price, discount_manual, tmp_vat, cal_vat, net_price, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, month_mm, year_20yy, show_quote_flag, show_sale_flag, show_stock_out_flag, show_service_flag, show_purchase_flag, show_stock_in_flag, show_report_flag, cal_down_payment_flag, has_edit_trans_flag, is_active_flag, trans_desc, bill_split_123` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123)
	res, err := db.ExecContext(ctx, sqlstr, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	tdt.IDTmpDocTrans = uint(id)
	// set exists
	tdt._exists = true
	return nil
}

// Update updates a TmpDocTran in the database.
func (tdt *TmpDocTran) Update(ctx context.Context, db DB) error {
	switch {
	case !tdt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tdt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE spc_holding.tmp_doc_trans SET ` +
		`id_doc_core = ?, id_doc_sale = ?, id_doc_stock_out = ?, id_doc_service = ?, id_doc_purch = ?, id_doc_stock_in = ?, id_branch = ?, id_promo_detail = ?, id_stock_core = ?, id_product = ?, id_supplier = ?, tmp_product_name = ?, part_engine_no = ?, part_serial_no = ?, is_volume_flag = ?, zero_cost_flag = ?, qty_in_cost = ?, qty_in_free = ?, qty_out_cost = ?, qty_out_free = ?, price_per_unit = ?, total_price = ?, discount_manual = ?, tmp_vat = ?, cal_vat = ?, net_price = ?, record_create_time = ?, record_create_by_id = ?, record_create_by_name = ?, record_update_time = ?, record_update_by_id = ?, record_update_by_name = ?, month_mm = ?, year_20yy = ?, show_quote_flag = ?, show_sale_flag = ?, show_stock_out_flag = ?, show_service_flag = ?, show_purchase_flag = ?, show_stock_in_flag = ?, show_report_flag = ?, cal_down_payment_flag = ?, has_edit_trans_flag = ?, is_active_flag = ?, trans_desc = ?, bill_split_123 = ? ` +
		`WHERE id_tmp_doc_trans = ?`
	// run
	logf(sqlstr, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123, tdt.IDTmpDocTrans)
	if _, err := db.ExecContext(ctx, sqlstr, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123, tdt.IDTmpDocTrans); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the TmpDocTran to the database.
func (tdt *TmpDocTran) Save(ctx context.Context, db DB) error {
	if tdt.Exists() {
		return tdt.Update(ctx, db)
	}
	return tdt.Insert(ctx, db)
}

// Upsert performs an upsert for TmpDocTran.
func (tdt *TmpDocTran) Upsert(ctx context.Context, db DB) error {
	switch {
	case tdt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO spc_holding.tmp_doc_trans (` +
		`id_tmp_doc_trans, id_doc_core, id_doc_sale, id_doc_stock_out, id_doc_service, id_doc_purch, id_doc_stock_in, id_branch, id_promo_detail, id_stock_core, id_product, id_supplier, tmp_product_name, part_engine_no, part_serial_no, is_volume_flag, zero_cost_flag, qty_in_cost, qty_in_free, qty_out_cost, qty_out_free, price_per_unit, total_price, discount_manual, tmp_vat, cal_vat, net_price, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, month_mm, year_20yy, show_quote_flag, show_sale_flag, show_stock_out_flag, show_service_flag, show_purchase_flag, show_stock_in_flag, show_report_flag, cal_down_payment_flag, has_edit_trans_flag, is_active_flag, trans_desc, bill_split_123` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id_doc_core = VALUES(id_doc_core), id_doc_sale = VALUES(id_doc_sale), id_doc_stock_out = VALUES(id_doc_stock_out), id_doc_service = VALUES(id_doc_service), id_doc_purch = VALUES(id_doc_purch), id_doc_stock_in = VALUES(id_doc_stock_in), id_branch = VALUES(id_branch), id_promo_detail = VALUES(id_promo_detail), id_stock_core = VALUES(id_stock_core), id_product = VALUES(id_product), id_supplier = VALUES(id_supplier), tmp_product_name = VALUES(tmp_product_name), part_engine_no = VALUES(part_engine_no), part_serial_no = VALUES(part_serial_no), is_volume_flag = VALUES(is_volume_flag), zero_cost_flag = VALUES(zero_cost_flag), qty_in_cost = VALUES(qty_in_cost), qty_in_free = VALUES(qty_in_free), qty_out_cost = VALUES(qty_out_cost), qty_out_free = VALUES(qty_out_free), price_per_unit = VALUES(price_per_unit), total_price = VALUES(total_price), discount_manual = VALUES(discount_manual), tmp_vat = VALUES(tmp_vat), cal_vat = VALUES(cal_vat), net_price = VALUES(net_price), record_create_time = VALUES(record_create_time), record_create_by_id = VALUES(record_create_by_id), record_create_by_name = VALUES(record_create_by_name), record_update_time = VALUES(record_update_time), record_update_by_id = VALUES(record_update_by_id), record_update_by_name = VALUES(record_update_by_name), month_mm = VALUES(month_mm), year_20yy = VALUES(year_20yy), show_quote_flag = VALUES(show_quote_flag), show_sale_flag = VALUES(show_sale_flag), show_stock_out_flag = VALUES(show_stock_out_flag), show_service_flag = VALUES(show_service_flag), show_purchase_flag = VALUES(show_purchase_flag), show_stock_in_flag = VALUES(show_stock_in_flag), show_report_flag = VALUES(show_report_flag), cal_down_payment_flag = VALUES(cal_down_payment_flag), has_edit_trans_flag = VALUES(has_edit_trans_flag), is_active_flag = VALUES(is_active_flag), trans_desc = VALUES(trans_desc), bill_split_123 = VALUES(bill_split_123)`
	// run
	logf(sqlstr, tdt.IDTmpDocTrans, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123)
	if _, err := db.ExecContext(ctx, sqlstr, tdt.IDTmpDocTrans, tdt.IDDocCore, tdt.IDDocSale, tdt.IDDocStockOut, tdt.IDDocService, tdt.IDDocPurch, tdt.IDDocStockIn, tdt.IDBranch, tdt.IDPromoDetail, tdt.IDStockCore, tdt.IDProduct, tdt.IDSupplier, tdt.TmpProductName, tdt.PartEngineNo, tdt.PartSerialNo, tdt.IsVolumeFlag, tdt.ZeroCostFlag, tdt.QtyInCost, tdt.QtyInFree, tdt.QtyOutCost, tdt.QtyOutFree, tdt.PricePerUnit, tdt.TotalPrice, tdt.DiscountManual, tdt.TmpVat, tdt.CalVat, tdt.NetPrice, tdt.RecordCreateTime, tdt.RecordCreateByID, tdt.RecordCreateByName, tdt.RecordUpdateTime, tdt.RecordUpdateByID, tdt.RecordUpdateByName, tdt.MonthMm, tdt.Year20yy, tdt.ShowQuoteFlag, tdt.ShowSaleFlag, tdt.ShowStockOutFlag, tdt.ShowServiceFlag, tdt.ShowPurchaseFlag, tdt.ShowStockInFlag, tdt.ShowReportFlag, tdt.CalDownPaymentFlag, tdt.HasEditTransFlag, tdt.IsActiveFlag, tdt.TransDesc, tdt.BillSplit123); err != nil {
		return logerror(err)
	}
	// set exists
	tdt._exists = true
	return nil
}

// Delete deletes the TmpDocTran from the database.
func (tdt *TmpDocTran) Delete(ctx context.Context, db DB) error {
	switch {
	case !tdt._exists: // doesn't exist
		return nil
	case tdt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM spc_holding.tmp_doc_trans ` +
		`WHERE id_tmp_doc_trans = ?`
	// run
	logf(sqlstr, tdt.IDTmpDocTrans)
	if _, err := db.ExecContext(ctx, sqlstr, tdt.IDTmpDocTrans); err != nil {
		return logerror(err)
	}
	// set deleted
	tdt._deleted = true
	return nil
}

// TmpDocTranByIDTmpDocTrans retrieves a row from 'spc_holding.tmp_doc_trans' as a TmpDocTran.
//
// Generated from index 'tmp_doc_trans_id_tmp_doc_trans_pkey'.
func TmpDocTranByIDTmpDocTrans(ctx context.Context, db DB, idTmpDocTrans uint) (*TmpDocTran, error) {
	// query
	const sqlstr = `SELECT ` +
		`id_tmp_doc_trans, id_doc_core, id_doc_sale, id_doc_stock_out, id_doc_service, id_doc_purch, id_doc_stock_in, id_branch, id_promo_detail, id_stock_core, id_product, id_supplier, tmp_product_name, part_engine_no, part_serial_no, is_volume_flag, zero_cost_flag, qty_in_cost, qty_in_free, qty_out_cost, qty_out_free, price_per_unit, total_price, discount_manual, tmp_vat, cal_vat, net_price, record_create_time, record_create_by_id, record_create_by_name, record_update_time, record_update_by_id, record_update_by_name, month_mm, year_20yy, show_quote_flag, show_sale_flag, show_stock_out_flag, show_service_flag, show_purchase_flag, show_stock_in_flag, show_report_flag, cal_down_payment_flag, has_edit_trans_flag, is_active_flag, trans_desc, bill_split_123 ` +
		`FROM spc_holding.tmp_doc_trans ` +
		`WHERE id_tmp_doc_trans = ?`
	// run
	logf(sqlstr, idTmpDocTrans)
	tdt := TmpDocTran{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idTmpDocTrans).Scan(&tdt.IDTmpDocTrans, &tdt.IDDocCore, &tdt.IDDocSale, &tdt.IDDocStockOut, &tdt.IDDocService, &tdt.IDDocPurch, &tdt.IDDocStockIn, &tdt.IDBranch, &tdt.IDPromoDetail, &tdt.IDStockCore, &tdt.IDProduct, &tdt.IDSupplier, &tdt.TmpProductName, &tdt.PartEngineNo, &tdt.PartSerialNo, &tdt.IsVolumeFlag, &tdt.ZeroCostFlag, &tdt.QtyInCost, &tdt.QtyInFree, &tdt.QtyOutCost, &tdt.QtyOutFree, &tdt.PricePerUnit, &tdt.TotalPrice, &tdt.DiscountManual, &tdt.TmpVat, &tdt.CalVat, &tdt.NetPrice, &tdt.RecordCreateTime, &tdt.RecordCreateByID, &tdt.RecordCreateByName, &tdt.RecordUpdateTime, &tdt.RecordUpdateByID, &tdt.RecordUpdateByName, &tdt.MonthMm, &tdt.Year20yy, &tdt.ShowQuoteFlag, &tdt.ShowSaleFlag, &tdt.ShowStockOutFlag, &tdt.ShowServiceFlag, &tdt.ShowPurchaseFlag, &tdt.ShowStockInFlag, &tdt.ShowReportFlag, &tdt.CalDownPaymentFlag, &tdt.HasEditTransFlag, &tdt.IsActiveFlag, &tdt.TransDesc, &tdt.BillSplit123); err != nil {
		return nil, logerror(err)
	}
	return &tdt, nil
}
